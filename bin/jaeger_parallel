#!/usr/bin/env python

"""
Copyright 2024 R. Y. Wijesekara - University Medicine Greifswald, Germany

Identifying phage genome sequences concealed in metagenomes is a
long standing problem in viral metagenomics and ecology.
The Jaeger approach uses homology-free machine learning to identify
 both phages and prophages in metagenomic assemblies.

"""

import subprocess
import os
import concurrent.futures
import time
import progressbar
import argparse
from importlib.metadata import version
from jaegeraa.utils import description

progressbar.streams.flush()


def dir_path(path):
    """checks path and creates if absent"""
    if not os.path.isdir(path):
        os.mkdir(path)
    return path


def file_path(path):
    """checks if file is present"""
    if os.path.isfile(path):
        return path
    else:
        raise argparse.ArgumentTypeError(f"ERROR:{path} is not a valid file")


def cmdparser():
    """cmdline argument parser"""
    parser = argparse.ArgumentParser(
        description=description(version("jaeger-bio")),
        usage=argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "-i",
        "--input",
        type=file_path,
        required=True,
        help="path to a file containing a list of input file paths",
    )
    parser.add_argument(
        "-o",
        "--outpath",
        type=str,
        required=True, help="path to output directory"
    )
    parser.add_argument(
        "--fsize",
        type=int,
        nargs="?",
        default=2048,
        help="length of the sliding window (value must be 2^n). default: 2048",
    )
    parser.add_argument(
        "--stride",
        type=int,
        nargs="?",
        default=2048,
        help="stride of the sliding window. default: 2048 (stride==fsize)",
    )
    parser.add_argument(
        "-m",
        "--model",
        choices=["default", "experimental_1", "experimental_2"],
        default="default",
        help="select a deep-learning model to use. default:default",
    )
    parser.add_argument(
        "-p",
        "--prophage",
        action="store_true",
        default=False,
        help="extract and report prophage-like regions. default:False",
    )
    parser.add_argument(
        "-s",
        "--sensitivity",
        type=float,
        nargs="?",
        default=1.5,
        help="sensitivity of the prophage extraction algorithm (between 0 - 4). default: 1.5 ",
    )
    parser.add_argument(
        "--lc",
        type=int,
        nargs="?",
        default=500000,
        help="minimum contig length to run prophage extraction algorithm. default: 500000 bp",
    )
    parser.add_argument(
        "--rc",
        type=float,
        nargs="?",
        default=0.1,
        help="minium reliability score required to accept predictions. default: 0.2",
    )
    parser.add_argument(
        "--pc",
        type=int,
        nargs="?",
        default=3,
        help="minium phage score required to accept predictions. default: 3",
    )
    parser.add_argument(
        "--batch",
        type=int,
        nargs="?",
        default=96,
        help="parallel batch size, set to a lower value if your gpu runs out of memory. default:96",
    )
    parser.add_argument(
        "--workers",
        type=int,
        nargs="?",
        default=4,
        help="number of threads to use. default: 4",
    )
    parser.add_argument(
        "--getalllogits",
        action="store_true",
        help="writes window-wise scores to a .npy file",
    )
    parser.add_argument(
        "--getsequences",
        action="store_true",
        help="writes the putative phage sequences to a .fasta file",
    )

    misc = parser.add_argument_group("Misc. Options")

    misc.add_argument(
        "-v",
        "--verbose",
        action="count",
        default=2,
        help="Verbosity level : 1 warning, 2 info, 3 debug, (default info)",
    )
    misc.add_argument(
        "-f",
        "--overwrite",
        action="store_true", help="Overwrite existing files"
    )
    parser.add_argument(
        "-mw",
        "--maxworkers",
        type=int,
        required=False,
        default=1,
        help="set the maxium number of workers for a single GPU",
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "--ngpu",
        type=int,
        required=False,
        help="set the number of GPUs to use",
    )
    group.add_argument(
        "--gpulist",
        type=int,
        nargs='+',
        required=False,
        help="list the physicalids of GPUs to use",
    )
    return parser.parse_args()


class SubprocessPool:
    def __init__(self,
                 max_workers_per_gpu,
                 num_gpus,
                 gpu_ids,
                 total_commands,
                 commands):
        self.max_workers_per_gpu = max_workers_per_gpu
        self.num_gpus = num_gpus
        self.executor = concurrent.futures.ThreadPoolExecutor(
            max_workers=max_workers_per_gpu * num_gpus
        )
        if gpu_ids:
            self.futures = {i: [] for i in gpu_ids}
            self.counter = {i: 0 for i in gpu_ids}
        else:
            self.futures = {i: [] for i in range(num_gpus)}
            self.counter = {i: 0 for i in range(num_gpus)}

        self.pending_commands = []
        self.done = 0
        self.total = total_commands
        self.pending_commands = commands

    def submit(self, command):
        # check which gpu is vacant
        # print(self.counter)
        for key, value in self.counter.items():
            # print(key,value)
            if value < self.max_workers_per_gpu:
                # edit the command and specify the physicalid of the gpu to use
                command_ = command + f" --physicalid {key}"
                future = self.executor.submit(self._run_subprocess, command_)
                self.futures[key].append(future)
                self.counter[key] += 1
                break
        # if value == self.max_workers_per_gpu and key == self.num_gpus:
        # if all workers are busy, append to pending commands

    def _run_subprocess(self, command):
        try:
            subprocess.run(command,
                           shell=True,
                           check=True,
                           capture_output=True)
        except subprocess.CalledProcessError as e:
            print(f"error executing '{command}': {e}")
        except Exception as e:
            print(f"an error occurred: {e}")

    def monitor_pool(self):

        with progressbar.ProgressBar(max_value=self.total) as pbar:
            while True:
                for key, values in self.futures.items():
                    # print(key,values,self.pending_commands)
                    for future in values:
                        if future.done():
                            self.futures[key].remove(future)
                            self.counter[key] -= 1
                            pbar.update(self.done)
                            self.done += 1
                if (
                    self.counter[key] < self.max_workers_per_gpu
                    and len(self.pending_commands) > 0
                ):
                    # Replenish the pool by submitting new tasks
                    self.submit(self.pending_commands.pop(0))

                elif self.done == self.total:
                    self.executor.shutdown()  # shutdown the pool
                    break  # exit the loop
                time.sleep(1)  # Adjust sleep duration as needed

    def close(self):
        self.executor.shutdown()


if __name__ == "__main__":
    args = cmdparser()
    input_paths = [line.rstrip("\n") for line in open(args.input).readlines()]
    if args.ngpu:
        NUMBER_OF_GPUS = args.ngpu
        GPU_IDS = [i for i in range(args.ngpu)]
    elif args.gpulist:
        NUMBER_OF_GPUS = list(args.gpulist)
        GPU_IDS = args.gpulist
    MAX_WORKERS_PER_GPU = args.maxworkers
    NUMBER_OF_TASKS = len(input_paths)

    template = ""
    # if args.ofasta:
    #     template += f" --getsequences {args.getsequences}"
    # if args.cutoff:
    #     template += f' --cutoff {args.cutoff}'
    # if args.fsize:
    #     template += f" --fsize {args.fsize}"
    # if args.stride:
    #     template += f" --stride {args.stride}"
    # if args.batch:
    #     template += f" --batch {args.batch}"
    # if args.getalllogits:
    #     template += " --getalllogits "
    # if args.getalllabels:
    #     template += " --getalllabels "
    # # if args.verbose:
    # #      template += f' --verbose {args.verbose} '
    # if args.overwrite:
    #     template += " --overwrite "

    for k, v in vars(args).items():
        if k not in ['maxworkers', 'ngpu', 'gpulist', 'input', 'outpath']:
            template += f"--{k} {v} "

    ALL_COMMANDS = [f"jaeger run -i {i} -o {args.outpath} {template}"
                    for i in input_paths]
    
    pool = SubprocessPool(
        max_workers_per_gpu=MAX_WORKERS_PER_GPU,
        num_gpus=NUMBER_OF_GPUS,
        gpu_ids=GPU_IDS,
        total_commands=NUMBER_OF_TASKS,
        commands=ALL_COMMANDS
    )

    try:
        pool.monitor_pool()
    except KeyboardInterrupt:
        pool.close()
